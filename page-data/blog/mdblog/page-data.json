{"componentChunkName":"component---src-templates-post-template-jsx","path":"/blog/mdblog","webpackCompilationHash":"d6d0133c8b1aed2a9885","result":{"data":{"post":{"html":"<h1>DIY static website builder</h1>\n<h2>Let's start with Why</h2>\n<p>A number of years ago I listened to a talk by <a href=\"https://www.hanselman.com/\">Scott Hanselman</a> where he spoke about the reason he started blogging. He said, and I paraphrase, <em>\"It's a great way for me to remember stuff, because I can google my past thoughts.\"</em></p>\n<p>That really stuck with me for some reason and I thought it was a very simple, unpretentious reason to start writing stuff on the internet.\nI never thought I would do the same thing myself because, well, I don't have that many thoughts to begin with. Certainly nothing worth googling.</p>\n<p>Recently however, it has been more common for me to have thoughts like <em>\"Hmm, I think I've read something about that somewhere.\"</em> or <em>\"I think I've solved this exact problem before.\"</em>. Suddenly I realized that I might have the same problem Hanselman had.</p>\n<h2>Then what?</h2>\n<p>In order for me to start writing things down at all I had to make it super easy for myself. It had to be as easy as opening a text file and just writing things down.</p>\n<p>I already use <a href=\"https://daringfireball.net/projects/markdown/\">Markdown</a> for most of my notes which translates well into HTML so it seemed like a good choice.\nHowever I felt like most of the available static website builders like <a href=\"https://jekyllrb.com/\">Jekyll</a> and <a href=\"https://hexo.io/\">Hexo</a> were a bit too much overhead.</p>\n<p>After a bit of googling I stumbled upon <a href=\"https://www.omardelarosa.com/posts/making-a-markdown-blog-using-webpack.html\">this post by Omar Delarosa</a> which solves my exact problem using <a href=\"https://webpack.js.org/\">webpack</a>. I already had a personal website built with webpack so adding the rendering of Markdown looked to be the easiest way forward.\nSo without further due, here is...</p>\n<h2>How I made this non-blog</h2>\n<p>So the basic problems we want to solve are:</p>\n<ol>\n<li>\n<p>Take some Markdown and convert it into HTML.\nWhich is exactly what <a href=\"https://marked.js.org/#/README.md\">marked</a> does.</p>\n<p><em>Note: I'm using <a href=\"https://github.com/j201/meta-marked\">meta-marked</a> to do this because it allows you to add metadata, like title, author and description in the Markdown file as well as the actual content.</em></p>\n</li>\n<li>Then we want to take that HTML code and put that into an <code>.html</code> file together with any <code>&#x3C;style></code>, <code>&#x3C;link></code>, <code>&#x3C;script></code> and metadata we want to include.\nWhich is exactly what <a href=\"https://github.com/jantimon/html-webpack-plugin\">html-webpack-plugin</a> does.</li>\n</ol>\n<p>So in order for us to be able to create a website with multiple different pages, there are two key features in <code>html-webpack-plugin</code> that we need:</p>\n<h3>1. Generating multiple <code>.html</code> pages</h3>\n<p>You can add as many instances of the <code>HtmlWebpackPlugin</code> as you want to the <code>plugins</code> array to generate multiple pages.</p>\n<div class=\"code-filename\">webpack.config.js</div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">entry</span>: {\n    <span class=\"hljs-attr\">index</span>: <span class=\"hljs-string\">'index.js'</span>,\n  },\n  <span class=\"hljs-attr\">output</span>: {\n    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">'[name].bundle.js'</span>\n  },\n  <span class=\"hljs-attr\">module</span>: {\n    <span class=\"hljs-attr\">rules</span>: [\n      <span class=\"hljs-comment\">// All of your bundle loaders should go here...</span>\n    ]\n  },\n  <span class=\"hljs-attr\">plugins</span>: [\n      <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin({\n          <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">'template1.html'</span>,\n          <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'Page 1'</span>\n      }),\n      <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin({\n          <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">'template2.html'</span>,\n          <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'Page 2'</span>\n      })\n  ]\n};</code></pre>\n<p>Or use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">spread operator</a> to do the same thing with less code.</p>\n<div class=\"code-filename\">webpack.config.js</div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// returns an array of HtmlWebpackPlugin</span>\n<span class=\"hljs-keyword\">const</span> createPages = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =></span> [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>].map(<span class=\"hljs-function\"><span class=\"hljs-params\">n</span> =></span> createPage(n)));\n\n<span class=\"hljs-keyword\">const</span> createPage = <span class=\"hljs-function\">(<span class=\"hljs-params\">n</span>) =></span> <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin({\n    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`template<span class=\"hljs-subst\">${n}</span>`</span>,\n    <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">`Page <span class=\"hljs-subst\">${n}</span>`</span>\n});\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-comment\">// ...</span>\n\n  plugins: [\n      <span class=\"hljs-comment\">// Spread the result into the plugins array</span>\n      ...createPages()\n  ]\n};</code></pre>\n<h3>2. Extending the <a href=\"https://github.com/jantimon/html-webpack-plugin#options\"><code>options</code></a> object to inject our Markdown</h3>\n<p>The <code>html-webpack-plugin</code> allows for quite a few options for customizing the generated <code>.html</code> file, like setting the title of the page, favicon or use a certain template for the page.\nHere is an example of using the <code>options</code> object:</p>\n<div class=\"code-filename\">webpack.config.js</div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>);\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-comment\">//...</span>\n  plugins: [\n      <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin({\n          <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'Hello World!'</span>,\n          <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">'template.html'</span>\n      })\n  ]\n};</code></pre>\n<div class=\"code-filename\">template.html</div>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE html></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">%=</span> <span class=\"hljs-attr\">htmlWebpackPlugin.options.title</span> %></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span></code></pre>\n<p>And the result will be an <code>.html</code> file with the title 'Hello World'.</p>\n<p>The neat thing about this is that you can extend the <code>options</code> object with whatever you want, and use those \"custom\" values in your template.</p>\n<div class=\"code-filename\">webpack.config.js</div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>);\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-comment\">//...</span>\n  plugins: [\n      <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin({\n          <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'Hello World!'</span>,\n          <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">'template.html'</span>,\n          <span class=\"hljs-attr\">myCustomValue</span>: <span class=\"hljs-string\">'Cool like Fonzy'</span>\n      })\n  ]\n};</code></pre>\n<div class=\"code-filename\">template.html</div>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE html></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">%=</span> <span class=\"hljs-attr\">htmlWebpackPlugin.options.title</span> %></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">%=</span> <span class=\"hljs-attr\">htmlWebpackPlugin.options.myCustomValue</span> %></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span></code></pre>\n<p>And the result will look like this:</p>\n<div class=\"code-filename\">template.html</div>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE html></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>\n    Hello World\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Cool like Fonzy<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span></code></pre>\n<p>This feature is the key to injecting the converted Markdown content into the generated <code>.html</code> file.</p>\n<h3>Now let's combine the two features</h3>\n<div class=\"code-filename\">webpack.config.js</div>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// This is just an example.</span>\n<span class=\"hljs-comment\">// The actual files will probably be</span>\n<span class=\"hljs-comment\">// loaded from .md files</span>\n<span class=\"hljs-keyword\">const</span> myMarkdownFiles = [\n  {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'index.md'</span>,\n    <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">'# Hello World'</span>\n  }\n];\n<span class=\"hljs-keyword\">const</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>);\n<span class=\"hljs-keyword\">const</span> marked = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'meta-marked'</span>);\n\n<span class=\"hljs-keyword\">const</span> createPage = <span class=\"hljs-function\">(<span class=\"hljs-params\">markdownFile</span>) =></span> {\n  <span class=\"hljs-comment\">// Convert markdown content to HTML</span>\n  <span class=\"hljs-keyword\">const</span> content = marked(markdownFile.content);\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(<span class=\"hljs-comment\">/*options:*/</span>{\n    <span class=\"hljs-comment\">// Standard options found in the documentation</span>\n    <span class=\"hljs-comment\">// https://github.com/jantimon/html-webpack-plugin#options</span>\n    filename: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${markdownFile.name}</span>.html`</span>,\n    <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">'template.html'</span>,\n    <span class=\"hljs-attr\">title</span>: content.meta.title,\n    <span class=\"hljs-comment\">// This is an arbitrary extension to the options object</span>\n    <span class=\"hljs-comment\">// used to inject the converted markdown content.</span>\n    content: content.html\n  });\n};\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-comment\">//...</span>\n  plugins: [\n    <span class=\"hljs-comment\">// Spread the returned HtmlWebpackPlugin config</span>\n    <span class=\"hljs-comment\">// objects into the plugins array.</span>\n    <span class=\"hljs-comment\">// You can pass as many as you want.</span>\n    ...myMarkdownFiles.map(<span class=\"hljs-function\"><span class=\"hljs-params\">markdownFile</span> =></span> createPage(markdownFile))\n  ]\n};</code></pre>\n<p>Voilà, now you have a static website, build with Markdown</p>\n<p>I've compiled an MVP to create a static website using this method that you can <a href=\"https://github.com/a-game/markdown-website\">check out here.</a>\nFor a slightly more advanced setup combining my original website and the newer Markdown parts you can check out the source code of this very website, <a href=\"https://github.com/a-game/a-game.github.io\">which is available here.</a></p>","frontmatter":{"date":"December 25, 2018","path":"/blog/mdblog","title":"How I made this non-blog","description":"How to create a static website using Markdown and webpack."}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}